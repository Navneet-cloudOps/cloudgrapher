{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/scripts/collectdata.js","edit.bundle.js","app/scripts/edit.js","app/scripts/findedges.js","app/scripts/template.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","findEdges","graphOptions","nodes","brokenImage","edges","style","color.highlight","stabilize","zoomExtentOnStabilize","collectData","json","data","knownResources","possibleEdges","addEdge","toId","title","push","from","resourceKey","to","Resources","resource","props","Properties","group","Type","toLowerCase","replace","id","label","shape","image","filter","edge","indexOf","collectCyData","edgeFilters","AWS::EC2::SecurityGroupIngress","newTarget","source","target","AWS::EC2::SecurityGroupEgress","default","type","parent","get","awsType","this","edgeIndex","classes","./findedges",2,"myCodeMirror","CodeMirror","document","getElementById","value","lineNumbers","mode","foldGutter","gutters","lint","onUpdateLinting","annotations","template","refreshGraph","setSize","graphArea","$","editor","cytolib","cytoscape","graphContainer","jsonproxy","jsonp","ajax","url","dataType","success","responseText","changeStyle","isResizing","lastDownX","remoteInput","loadURL","fromURLInput","css","alertify","message","error","loadFile","file","load","name","reason","saveImage","saveWindow","window","open","onload","src","base64Image","saveTemplate","blob","Blob","text","saveAs","description","mainRow","addEventListener","evt","stopPropagation","preventDefault","dataTransfer","dropEffect","files","click","event","is","show","change","setLayout","val","keypress","which","container","left","right","handle","on","clientX","offsetRight","width","offset","graph","fit","./template",3,"findIn","start","makeEdge","Array","forEach","elem","Object","keys","fn","join","key","k",4,"options","collector","defaultContainer","cyto","fail","reader","FileReader","setData","result","readAsText","onSuccess","onError","dataString","JSON","stringify","dataObject","parse","getDoc","setValue","elements","layout","padding","boxSelectionEnabled","Description","center","png","full","getValue","fromURL","corsSupport","textStatus","status","statusText","input","checkValidity","hide","indent","./collectdata"],"mappings":"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","file":"edit.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* jshint devel:true */\n/* global exports, require */\nvar findEdges = require('./findedges').findEdges;\nexports.graphOptions = {\n  'nodes': {\n    'brokenImage': 'images/unknown.png'\n  },\n  'edges': {\n    'style' : 'arrow',\n    'color.highlight': 'red'\n  },\n  'stabilize': true,\n  'zoomExtentOnStabilize': true\n};\nexports.collectData = function(json) {\n  'use strict';\n  var data = { nodes:[], edges:[] };\n  var knownResources = [];\n  var possibleEdges = [];\n  var addEdge = function (toId, title){\n    possibleEdges.push( {'from': resourceKey, 'to': toId, 'title': title } );\n  };\n  for (var resourceKey in json.Resources) {\n    var resource = json.Resources[resourceKey];\n    var props = resource.Properties;\n    var group = resource.Type.toLowerCase().replace(/::/g,'-');\n    knownResources.push(resourceKey);\n    data.nodes.push({\n      'id'   : resourceKey,\n      'label': resourceKey,\n      'group': group,\n      'shape': 'image',\n      'image': 'images/' + group + '.png'\n    });\n    findEdges(props, addEdge);\n  }\n  data.edges = possibleEdges.filter(function(edge) {\n    return edge && knownResources.indexOf(edge.to) >= 0;\n  });\n  return data;\n};\n\n\nexports.collectCyData = function(json) {\n  'use strict';\n  var edgeFilters = {\n    'AWS::EC2::SecurityGroupIngress': function(edge /*, source, target*/){\n      if (edge.data.resource === 'GroupId') {\n        // NOOP the direction is good\n      }\n      else if (edge.data.resource === 'SourceSecurityGroupId') {\n        var newTarget = edge.data.source;\n        edge.data.source = edge.data.target;\n        edge.data.target = newTarget;\n      }\n      return true;\n    },\n    'AWS::EC2::SecurityGroupEgress': function(edge /*, source, target*/) {\n      if (edge.data.resource === 'DestinationSecurityGroupId') {\n        // NOOP the direction is good\n      }\n      else if (edge.data.resource === 'GroupId') {\n        var newTarget = edge.data.source;\n        edge.data.source = edge.data.target;\n        edge.data.target = newTarget;\n      }\n      return true;\n    },\n    'default': function(edge, source, target) {\n      if (target && target.type === 'AWS::EC2::SecurityGroup' && source.type !== 'AWS::EC2::SecurityGroup'){\n        knownResources[edge.data.source].data.parent = edge.data.target;\n        return false;\n      }\n      return true;\n    },\n    'get': function(awsType) {\n      return this[awsType] || this['default'];\n    }\n  };\n  var data = { nodes:[], edges:[] };\n  var edgeIndex = 0;\n\n  var addEdge = function (toId, title, resource) {\n    possibleEdges.push({ data: { id: 'e'+ (edgeIndex++), source: resourceKey, target: toId, title: title, resource: resource }});\n  };\n\n  var knownResources = {};\n  var possibleEdges = [];\n\n  for (var resourceKey in json.Resources) {\n    var resource = json.Resources[resourceKey];\n    var r = {\n      data: {\n        id: resourceKey\n      },\n      classes: resource.Type.toLowerCase().replace(/::/g,'-'),\n      type: resource.Type\n    };\n    findEdges(resource.Properties, addEdge);\n    knownResources[resourceKey] = r;\n    data.nodes.push(r);\n  }\n\n  data.edges = possibleEdges.filter(function(edge) {\n    var source = knownResources[edge.data.source];\n    var target = knownResources[edge.data.target];\n    var filter = edgeFilters.get(source.type);\n    return edge && source && target && filter(edge, source, target);\n  });\n\n  return data;\n};\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/* jshint devel:true */\n/* global exports, require */\nvar findEdges = require('./findedges').findEdges;\nexports.graphOptions = {\n  'nodes': {\n    'brokenImage': 'images/unknown.png'\n  },\n  'edges': {\n    'style' : 'arrow',\n    'color.highlight': 'red'\n  },\n  'stabilize': true,\n  'zoomExtentOnStabilize': true\n};\nexports.collectData = function(json) {\n  'use strict';\n  var data = { nodes:[], edges:[] };\n  var knownResources = [];\n  var possibleEdges = [];\n  var addEdge = function (toId, title){\n    possibleEdges.push( {'from': resourceKey, 'to': toId, 'title': title } );\n  };\n  for (var resourceKey in json.Resources) {\n    var resource = json.Resources[resourceKey];\n    var props = resource.Properties;\n    var group = resource.Type.toLowerCase().replace(/::/g,'-');\n    knownResources.push(resourceKey);\n    data.nodes.push({\n      'id'   : resourceKey,\n      'label': resourceKey,\n      'group': group,\n      'shape': 'image',\n      'image': 'images/' + group + '.png'\n    });\n    findEdges(props, addEdge);\n  }\n  data.edges = possibleEdges.filter(function(edge) {\n    return edge && knownResources.indexOf(edge.to) >= 0;\n  });\n  return data;\n};\n\n\nexports.collectCyData = function(json) {\n  'use strict';\n  var edgeFilters = {\n    'AWS::EC2::SecurityGroupIngress': function(edge /*, source, target*/){\n      if (edge.data.resource === 'GroupId') {\n        // NOOP the direction is good\n      }\n      else if (edge.data.resource === 'SourceSecurityGroupId') {\n        var newTarget = edge.data.source;\n        edge.data.source = edge.data.target;\n        edge.data.target = newTarget;\n      }\n      return true;\n    },\n    'AWS::EC2::SecurityGroupEgress': function(edge /*, source, target*/) {\n      if (edge.data.resource === 'DestinationSecurityGroupId') {\n        // NOOP the direction is good\n      }\n      else if (edge.data.resource === 'GroupId') {\n        var newTarget = edge.data.source;\n        edge.data.source = edge.data.target;\n        edge.data.target = newTarget;\n      }\n      return true;\n    },\n    'default': function(edge, source, target) {\n      if (target && target.type === 'AWS::EC2::SecurityGroup' && source.type !== 'AWS::EC2::SecurityGroup'){\n        knownResources[edge.data.source].data.parent = edge.data.target;\n        return false;\n      }\n      return true;\n    },\n    'get': function(awsType) {\n      return this[awsType] || this['default'];\n    }\n  };\n  var data = { nodes:[], edges:[] };\n  var edgeIndex = 0;\n\n  var addEdge = function (toId, title, resource) {\n    possibleEdges.push({ data: { id: 'e'+ (edgeIndex++), source: resourceKey, target: toId, title: title, resource: resource }});\n  };\n\n  var knownResources = {};\n  var possibleEdges = [];\n\n  for (var resourceKey in json.Resources) {\n    var resource = json.Resources[resourceKey];\n    var r = {\n      data: {\n        id: resourceKey\n      },\n      classes: resource.Type.toLowerCase().replace(/::/g,'-'),\n      type: resource.Type\n    };\n    findEdges(resource.Properties, addEdge);\n    knownResources[resourceKey] = r;\n    data.nodes.push(r);\n  }\n\n  data.edges = possibleEdges.filter(function(edge) {\n    var source = knownResources[edge.data.source];\n    var target = knownResources[edge.data.target];\n    var filter = edgeFilters.get(source.type);\n    return edge && source && target && filter(edge, source, target);\n  });\n\n  return data;\n};\n\n},{\"./findedges\":3}],2:[function(require,module,exports){\n/* jshint devel:true */\n/* global saveAs, require, CodeMirror, alertify, cytoscape */\n\n(function() {\n  'use strict';\n\n  var myCodeMirror = new CodeMirror(document.getElementById('editor'), {\n    value: '{}',\n    lineNumbers: true,\n    mode: 'application/json',\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    lint: {\n      onUpdateLinting: function(annotations) {\n        if (template && (!annotations || annotations.length === 0)) {\n          template.refreshGraph();\n        }\n      }\n    }\n  });\n  myCodeMirror.setSize('100%', '800px');\n  var graphArea = $('#graph_area');\n  var template = require('./template').template({\n    'editor': myCodeMirror,\n    'cytolib': cytoscape,\n    'graphContainer': graphArea[0],\n    'jsonproxy': $.jsonp\n  });\n  $.ajax({\n    url: 'styles/main.cycss',\n    type: 'GET',\n    dataType: 'text',\n    success: function(responseText) {\n      template.changeStyle(responseText);\n    }\n  });\n  var isResizing = false,\n    lastDownX = 0;\n\n  var remoteInput = $('#remote_input');\n\n  var loadURL = function() {\n    template.fromURLInput(remoteInput,\n      function(url) {\n        graphArea.css('background-image', '');\n        alertify.success('Loaded URL \"' + url + '\" successfully');\n      },\n      function(url, message) {\n        alertify.error('Error while loading URL \"' + url + '\" :' + message);\n      }\n    );\n  };\n  var loadFile = function(file) {\n    template.load(\n      file,\n      function(name) {\n        graphArea.css('background-image', '');\n        alertify.success('Loaded file \"' + name + '\"');\n      },\n      function(name, reason) {\n        alertify.error('Unable to load file \"' + name + '\" because of ' + reason);\n      }\n    );\n  };\n\n  var saveImage = function() {\n    var saveWindow = window.open('savegraph.html');\n    saveWindow.onload = function() {\n      saveWindow.document.getElementById('graphPNG').src = template.base64Image();\n    };\n  };\n  var saveTemplate = function() {\n    var blob = new Blob([template.text(2)], {\n      type: 'text/plain;charset=utf-8'\n    });\n    saveAs(blob, template.description() + '.json');\n  };\n  var mainRow = document.getElementById('graph_area');\n  mainRow.addEventListener('dragover', function(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    evt.dataTransfer.dropEffect = 'copy';\n  }, false);\n  mainRow.addEventListener('drop', function(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    loadFile(evt.dataTransfer.files[0]);\n  }, false);\n  $('#graph_area').css('background-image', 'url(\"images/aws-cloudformation-template.svg\")');\n  $('#open_template').click(function(event) {\n    event.preventDefault();\n    $('#template_input').click();\n  });\n  $('#open_url').click(function(event) {\n    event.preventDefault();\n    if (remoteInput.is(':visible')) {\n      loadURL();\n    }\n    else {\n      remoteInput.show();\n    }\n  });\n  $('#template_input').change(function(event) {\n    loadFile(event.target.files[0]);\n  });\n  $('#save_template').click(function(event) {\n    event.preventDefault();\n    saveTemplate();\n    return false;\n  });\n  $('#save_graph').click(function(event) {\n    event.preventDefault();\n    saveImage();\n    return false;\n  });\n  $('#graph_layout').change(function() {\n    template.setLayout($('#graph_layout').val());\n  });\n\n  $('#remote_input').keypress(function(e) {\n    if (e.which === 13) {\n      loadURL();\n      return false;\n    }\n  });\n  var container = $('#container'),\n    left = $('#graph_area'),\n    right = $('#editor_pane'),\n    handle = $('#border');\n\n  handle.on('mousedown', function(e) {\n    isResizing = true;\n    lastDownX = e.clientX;\n  });\n\n  $(document).on('mousemove', function(e) {\n    // we don't want to do anything if we aren't resizing.\n    if (!isResizing) {\n      return;\n    }\n\n    var offsetRight = container.width() - (e.clientX - container.offset().left);\n\n    left.css('right', offsetRight);\n    right.css('width', offsetRight);\n  }).on('mouseup', function() {\n    if (isResizing) {\n      template.graph.fit();\n    }\n    // stop resizing\n    isResizing = false;\n  });\n})();\n\n},{\"./template\":4}],3:[function(require,module,exports){\n/* jshint devel:true */\n/* global exports */\n\n// findEdges/findIn\n//  - startElement element to traverse through\n//  - makeEdge     call back which expects a reference resource name and\n//                   title of the resource reference\n//  - title        resource title to push to callback function\n//\nexports.findEdges = function findIn (start, makeEdge, title) {\n  'use strict';\n  // If start is an array then let's loop through all elements to find edges\n  //\n  if (start instanceof Array) {\n    start.forEach(function(elem){\n      findIn(elem, makeEdge, title || '');\n    });\n  }\n  // Else if we hit some object and we should delve into it\n  //\n  else if (typeof start === 'object') {\n    // When we only have one key then it's probably some CloudFormation function\n    // we can use to make an make edge with\n    //\n    if (Object.keys(start).length === 1) {\n      var fn = Object.keys(start)[0];\n      // If we hit a Ref, it's definitely a reference of some sorts\n      // usually we only hit this option deep and the title should be available\n      // otherwise give an empty title\n      //\n      if (fn === 'Ref' && typeof start[fn] === 'string') {\n        makeEdge(start[fn], title || '', title);\n      }\n      // An Fn::Join is trickier, we might find edges recursively\n      //\n      else if (fn === 'Fn::Join' && start[fn] instanceof Array) {\n        start[fn][1].forEach(function(elem) {\n          findIn(elem, makeEdge, start[fn][1].join(start[fn][0]));\n        });\n      }\n      // If we see an Fn::GetAtt then make an edge with the reference,\n      // not the attribute\n      //\n      else if (fn === 'Fn::GetAtt' && start[fn] instanceof Array) {\n        makeEdge(start[fn][0], start[fn][1], title);\n      }\n      // Ok, forgot why this path is necessary, I guess it's when we didn't find\n      //  something to easily pull references from and we probably need to keep\n      //  searching anyway\n      //\n      else {\n        for (var key in start) {\n          findIn(start[key], makeEdge, key);\n        }\n      }\n    }\n    // if we have more than one key we have to delve deeper to find edges\n    //\n    else {\n      for (var k in start) {\n        findIn(start[k], makeEdge, k);\n      }\n    }\n  }\n};\n\n},{}],4:[function(require,module,exports){\n/* jshint devel:true */\n/* global exports, require, cytoscape */\n\nexports.template = function(options) {\n  'use strict';\n\n  var myCodeMirror = options.editor;\n  var collector = require('./collectdata');\n  var defaultContainer = options.graphContainer;\n  var jsonproxy = options.jsonproxy;\n  var graph;\n  var style;\n  var cyto = options.cytolib || cytoscape;\n\n  var changeStyle = function(data) {\n    style = data;\n    if (graph) {\n      graph.style(style);\n    }\n  };\n\n  var load = function(file, success, fail) {\n    var reader = new FileReader();\n    reader.onload = function() {\n      setData(reader.result, function() {\n        if (success) {\n          success(file.name);\n        }\n      }, function(e) {\n        if (fail) {\n          fail(file.name, e);\n        }\n      });\n\n    };\n    reader.readAsText(file);\n  };\n\n  var setData = function(data, onSuccess, onError) {\n    if (data) {\n      try {\n        var dataString = typeof data === 'string' ? data : JSON.stringify(data, null, 2);\n        var dataObject = typeof data === 'object' ? data : JSON.parse(data);\n\n        myCodeMirror.getDoc().setValue(dataString);\n        show(collector.collectCyData(dataObject));\n\n        if (onSuccess) {\n          onSuccess();\n        }\n      }\n      catch (e) {\n        if (onError) {\n          onError('Error processing data as JSON', e);\n        }\n      }\n    }\n    else {\n      if (onError) {\n        onError('No data');\n      }\n    }\n  };\n\n  var refreshGraph = function(){\n    show(collector.collectCyData(json()));\n  };\n\n  var show = function(data, container) {\n    graph = cyto({\n      container: container || defaultContainer,\n      elements: data,\n      style: style,\n      layout: {\n        name: 'cose',\n        padding: 5\n      }\n    });\n    graph.boxSelectionEnabled(true);\n  };\n\n  var description = function() {\n    var description = 'template';\n    try {\n      description = json().Description;\n    }\n    catch (e) {}\n    return description;\n  };\n\n  var base64Image = function() {\n    if (!graph) {\n      return;\n    }\n    graph.center();\n    graph.fit();\n    return graph.png({\n      full: false\n    });\n  };\n\n  var json = function() {\n    return JSON.parse(myCodeMirror.getDoc().getValue());\n  };\n\n  var setLayout = function(name) {\n    if (graph) {\n      graph.layout({\n        'name': name\n      });\n    }\n  };\n\n  var fromURL = function(url, success, onError) {\n    if (url) {\n      jsonproxy({\n        url: url,\n        corsSupport: true,\n        success: function(data) {\n          setData(data);\n          if (success) {\n            success(url);\n          }\n        },\n        error: function(data, textStatus) {\n            var message;\n            if (textStatus === 'parsererror') {\n              myCodeMirror.getDoc().setValue(data.responseText);\n              message = 'Unable to parse the result as valid JSON';\n            }\n            else {\n              message = 'Unable to load: status ' + data.status + ' ' + data.statusText;\n            }\n            if (onError) {\n              onError(url, message, data, textStatus);\n            }\n          }\n          // error, etc.\n      });\n    }\n  };\n\n  var fromURLInput = function(input, onSuccess, onError) {\n    var url = input.val();\n    if (input[0].checkValidity()) {\n      input.hide();\n      fromURL(url, onSuccess, onError);\n    }\n    else {\n      return false;\n    }\n  };\n\n  var text = function(indent) {\n    return indent ? JSON.stringify(json(), null, indent) : myCodeMirror.getDoc().getValue();\n  };\n\n  return {\n    load: load,\n    setData: setData,\n    fromURLInput: fromURLInput,\n    fromURL: fromURL,\n    refreshGraph: refreshGraph,\n    setLayout: setLayout,\n    base64Image: base64Image,\n    description: description,\n    changeStyle: changeStyle,\n    graph: graph,\n    text: text,\n    json: json\n  };\n};\n\n},{\"./collectdata\":1}]},{},[2])\n\n","/* jshint devel:true */\n/* global saveAs, require, CodeMirror, alertify, cytoscape */\n\n(function() {\n  'use strict';\n\n  var myCodeMirror = new CodeMirror(document.getElementById('editor'), {\n    value: '{}',\n    lineNumbers: true,\n    mode: 'application/json',\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    lint: {\n      onUpdateLinting: function(annotations) {\n        if (template && (!annotations || annotations.length === 0)) {\n          template.refreshGraph();\n        }\n      }\n    }\n  });\n  myCodeMirror.setSize('100%', '800px');\n  var graphArea = $('#graph_area');\n  var template = require('./template').template({\n    'editor': myCodeMirror,\n    'cytolib': cytoscape,\n    'graphContainer': graphArea[0],\n    'jsonproxy': $.jsonp\n  });\n  $.ajax({\n    url: 'styles/main.cycss',\n    type: 'GET',\n    dataType: 'text',\n    success: function(responseText) {\n      template.changeStyle(responseText);\n    }\n  });\n  var isResizing = false,\n    lastDownX = 0;\n\n  var remoteInput = $('#remote_input');\n\n  var loadURL = function() {\n    template.fromURLInput(remoteInput,\n      function(url) {\n        graphArea.css('background-image', '');\n        alertify.success('Loaded URL \"' + url + '\" successfully');\n      },\n      function(url, message) {\n        alertify.error('Error while loading URL \"' + url + '\" :' + message);\n      }\n    );\n  };\n  var loadFile = function(file) {\n    template.load(\n      file,\n      function(name) {\n        graphArea.css('background-image', '');\n        alertify.success('Loaded file \"' + name + '\"');\n      },\n      function(name, reason) {\n        alertify.error('Unable to load file \"' + name + '\" because of ' + reason);\n      }\n    );\n  };\n\n  var saveImage = function() {\n    var saveWindow = window.open('savegraph.html');\n    saveWindow.onload = function() {\n      saveWindow.document.getElementById('graphPNG').src = template.base64Image();\n    };\n  };\n  var saveTemplate = function() {\n    var blob = new Blob([template.text(2)], {\n      type: 'text/plain;charset=utf-8'\n    });\n    saveAs(blob, template.description() + '.json');\n  };\n  var mainRow = document.getElementById('graph_area');\n  mainRow.addEventListener('dragover', function(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    evt.dataTransfer.dropEffect = 'copy';\n  }, false);\n  mainRow.addEventListener('drop', function(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    loadFile(evt.dataTransfer.files[0]);\n  }, false);\n  $('#graph_area').css('background-image', 'url(\"images/aws-cloudformation-template.svg\")');\n  $('#open_template').click(function(event) {\n    event.preventDefault();\n    $('#template_input').click();\n  });\n  $('#open_url').click(function(event) {\n    event.preventDefault();\n    if (remoteInput.is(':visible')) {\n      loadURL();\n    }\n    else {\n      remoteInput.show();\n    }\n  });\n  $('#template_input').change(function(event) {\n    loadFile(event.target.files[0]);\n  });\n  $('#save_template').click(function(event) {\n    event.preventDefault();\n    saveTemplate();\n    return false;\n  });\n  $('#save_graph').click(function(event) {\n    event.preventDefault();\n    saveImage();\n    return false;\n  });\n  $('#graph_layout').change(function() {\n    template.setLayout($('#graph_layout').val());\n  });\n\n  $('#remote_input').keypress(function(e) {\n    if (e.which === 13) {\n      loadURL();\n      return false;\n    }\n  });\n  var container = $('#container'),\n    left = $('#graph_area'),\n    right = $('#editor_pane'),\n    handle = $('#border');\n\n  handle.on('mousedown', function(e) {\n    isResizing = true;\n    lastDownX = e.clientX;\n  });\n\n  $(document).on('mousemove', function(e) {\n    // we don't want to do anything if we aren't resizing.\n    if (!isResizing) {\n      return;\n    }\n\n    var offsetRight = container.width() - (e.clientX - container.offset().left);\n\n    left.css('right', offsetRight);\n    right.css('width', offsetRight);\n  }).on('mouseup', function() {\n    if (isResizing) {\n      template.graph.fit();\n    }\n    // stop resizing\n    isResizing = false;\n  });\n})();\n","/* jshint devel:true */\n/* global exports */\n\n// findEdges/findIn\n//  - startElement element to traverse through\n//  - makeEdge     call back which expects a reference resource name and\n//                   title of the resource reference\n//  - title        resource title to push to callback function\n//\nexports.findEdges = function findIn (start, makeEdge, title) {\n  'use strict';\n  // If start is an array then let's loop through all elements to find edges\n  //\n  if (start instanceof Array) {\n    start.forEach(function(elem){\n      findIn(elem, makeEdge, title || '');\n    });\n  }\n  // Else if we hit some object and we should delve into it\n  //\n  else if (typeof start === 'object') {\n    // When we only have one key then it's probably some CloudFormation function\n    // we can use to make an make edge with\n    //\n    if (Object.keys(start).length === 1) {\n      var fn = Object.keys(start)[0];\n      // If we hit a Ref, it's definitely a reference of some sorts\n      // usually we only hit this option deep and the title should be available\n      // otherwise give an empty title\n      //\n      if (fn === 'Ref' && typeof start[fn] === 'string') {\n        makeEdge(start[fn], title || '', title);\n      }\n      // An Fn::Join is trickier, we might find edges recursively\n      //\n      else if (fn === 'Fn::Join' && start[fn] instanceof Array) {\n        start[fn][1].forEach(function(elem) {\n          findIn(elem, makeEdge, start[fn][1].join(start[fn][0]));\n        });\n      }\n      // If we see an Fn::GetAtt then make an edge with the reference,\n      // not the attribute\n      //\n      else if (fn === 'Fn::GetAtt' && start[fn] instanceof Array) {\n        makeEdge(start[fn][0], start[fn][1], title);\n      }\n      // Ok, forgot why this path is necessary, I guess it's when we didn't find\n      //  something to easily pull references from and we probably need to keep\n      //  searching anyway\n      //\n      else {\n        for (var key in start) {\n          findIn(start[key], makeEdge, key);\n        }\n      }\n    }\n    // if we have more than one key we have to delve deeper to find edges\n    //\n    else {\n      for (var k in start) {\n        findIn(start[k], makeEdge, k);\n      }\n    }\n  }\n};\n","/* jshint devel:true */\n/* global exports, require, cytoscape */\n\nexports.template = function(options) {\n  'use strict';\n\n  var myCodeMirror = options.editor;\n  var collector = require('./collectdata');\n  var defaultContainer = options.graphContainer;\n  var jsonproxy = options.jsonproxy;\n  var graph;\n  var style;\n  var cyto = options.cytolib || cytoscape;\n\n  var changeStyle = function(data) {\n    style = data;\n    if (graph) {\n      graph.style(style);\n    }\n  };\n\n  var load = function(file, success, fail) {\n    var reader = new FileReader();\n    reader.onload = function() {\n      setData(reader.result, function() {\n        if (success) {\n          success(file.name);\n        }\n      }, function(e) {\n        if (fail) {\n          fail(file.name, e);\n        }\n      });\n\n    };\n    reader.readAsText(file);\n  };\n\n  var setData = function(data, onSuccess, onError) {\n    if (data) {\n      try {\n        var dataString = typeof data === 'string' ? data : JSON.stringify(data, null, 2);\n        var dataObject = typeof data === 'object' ? data : JSON.parse(data);\n\n        myCodeMirror.getDoc().setValue(dataString);\n        show(collector.collectCyData(dataObject));\n\n        if (onSuccess) {\n          onSuccess();\n        }\n      }\n      catch (e) {\n        if (onError) {\n          onError('Error processing data as JSON', e);\n        }\n      }\n    }\n    else {\n      if (onError) {\n        onError('No data');\n      }\n    }\n  };\n\n  var refreshGraph = function(){\n    show(collector.collectCyData(json()));\n  };\n\n  var show = function(data, container) {\n    graph = cyto({\n      container: container || defaultContainer,\n      elements: data,\n      style: style,\n      layout: {\n        name: 'cose',\n        padding: 5\n      }\n    });\n    graph.boxSelectionEnabled(true);\n  };\n\n  var description = function() {\n    var description = 'template';\n    try {\n      description = json().Description;\n    }\n    catch (e) {}\n    return description;\n  };\n\n  var base64Image = function() {\n    if (!graph) {\n      return;\n    }\n    graph.center();\n    graph.fit();\n    return graph.png({\n      full: false\n    });\n  };\n\n  var json = function() {\n    return JSON.parse(myCodeMirror.getDoc().getValue());\n  };\n\n  var setLayout = function(name) {\n    if (graph) {\n      graph.layout({\n        'name': name\n      });\n    }\n  };\n\n  var fromURL = function(url, success, onError) {\n    if (url) {\n      jsonproxy({\n        url: url,\n        corsSupport: true,\n        success: function(data) {\n          setData(data);\n          if (success) {\n            success(url);\n          }\n        },\n        error: function(data, textStatus) {\n            var message;\n            if (textStatus === 'parsererror') {\n              myCodeMirror.getDoc().setValue(data.responseText);\n              message = 'Unable to parse the result as valid JSON';\n            }\n            else {\n              message = 'Unable to load: status ' + data.status + ' ' + data.statusText;\n            }\n            if (onError) {\n              onError(url, message, data, textStatus);\n            }\n          }\n          // error, etc.\n      });\n    }\n  };\n\n  var fromURLInput = function(input, onSuccess, onError) {\n    var url = input.val();\n    if (input[0].checkValidity()) {\n      input.hide();\n      fromURL(url, onSuccess, onError);\n    }\n    else {\n      return false;\n    }\n  };\n\n  var text = function(indent) {\n    return indent ? JSON.stringify(json(), null, indent) : myCodeMirror.getDoc().getValue();\n  };\n\n  return {\n    load: load,\n    setData: setData,\n    fromURLInput: fromURLInput,\n    fromURL: fromURL,\n    refreshGraph: refreshGraph,\n    setLayout: setLayout,\n    base64Image: base64Image,\n    description: description,\n    changeStyle: changeStyle,\n    graph: graph,\n    text: text,\n    json: json\n  };\n};\n"],"sourceRoot":"/source/"}