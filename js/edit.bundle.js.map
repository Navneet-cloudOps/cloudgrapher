{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/scripts/collectdata.js","edit.bundle.js","app/scripts/edit.js","app/scripts/findedges.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","findEdges","graphOptions","nodes","brokenImage","edges","style","color.highlight","stabilize","zoomExtentOnStabilize","collectData","json","data","knownResources","possibleEdges","addEdge","toId","title","push","from","resourceKey","to","Resources","resource","props","Properties","group","Type","toLowerCase","replace","id","label","shape","image","filter","edge","indexOf","collectCyData","edgeFilters","AWS::EC2::SecurityGroupIngress","newTarget","source","target","AWS::EC2::SecurityGroupEgress","default","type","parent","get","awsType","this","edgeIndex","classes","./findedges",2,"collector","myCodeMirror","CodeMirror","document","getElementById","value","lineNumbers","mode","foldGutter","gutters","lint","onUpdateLinting","annotations","template","show","JSON","parse","getDoc","getValue","setSize","graph","graphStyleP","$","ajax","url","dataType","isResizing","lastDownX","load","file","reader","FileReader","onload","setData","result","readAsText","dataString","stringify","dataObject","setValue","css","console","log","alertify","error","cytoscape","container","elements","layout","name","padding","boxSelectionEnabled","description","content","Description","base64Image","center","fit","png","full","setLayout","fromURL","success","jsonp","corsSupport","textStatus","responseText","closeLogOnClick","message","status","statusText","fromURLInput","input","val","checkValidity","hide","saveImage","saveWindow","window","open","src","saveTemplate","prettyDoc","blob","Blob","saveAs","mainRow","addEventListener","evt","stopPropagation","preventDefault","dataTransfer","dropEffect","files","click","event","remoteInput","is","change","keypress","which","left","right","handle","on","clientX","offsetRight","width","offset","./collectdata",3,"findIn","start","makeEdge","Array","forEach","elem","Object","keys","fn","join","key","k"],"mappings":"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","file":"edit.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* jshint devel:true */\n/* global exports, require */\nvar findEdges = require('./findedges').findEdges;\nexports.graphOptions = {\n  'nodes': {\n    'brokenImage': 'images/unknown.png'\n  },\n  'edges': {\n    'style' : 'arrow',\n    'color.highlight': 'red'\n  },\n  'stabilize': true,\n  'zoomExtentOnStabilize': true\n};\nexports.collectData = function(json) {\n  'use strict';\n  var data = { nodes:[], edges:[] };\n  var knownResources = [];\n  var possibleEdges = [];\n  var addEdge = function (toId, title){\n    possibleEdges.push( {'from': resourceKey, 'to': toId, 'title': title } );\n  };\n  for (var resourceKey in json.Resources) {\n    var resource = json.Resources[resourceKey];\n    var props = resource.Properties;\n    var group = resource.Type.toLowerCase().replace(/::/g,'-');\n    knownResources.push(resourceKey);\n    data.nodes.push({\n      'id'   : resourceKey,\n      'label': resourceKey,\n      'group': group,\n      'shape': 'image',\n      'image': 'images/' + group + '.png'\n    });\n    findEdges(props, addEdge);\n  }\n  data.edges = possibleEdges.filter(function(edge) {\n    return edge && knownResources.indexOf(edge.to) >= 0;\n  });\n  return data;\n};\n\n\nexports.collectCyData = function(json) {\n  'use strict';\n  var edgeFilters = {\n    'AWS::EC2::SecurityGroupIngress': function(edge /*, source, target*/){\n      if (edge.data.resource === 'GroupId') {\n        // NOOP the direction is good\n      }\n      else if (edge.data.resource === 'SourceSecurityGroupId') {\n        var newTarget = edge.data.source;\n        edge.data.source = edge.data.target;\n        edge.data.target = newTarget;\n      }\n      return true;\n    },\n    'AWS::EC2::SecurityGroupEgress': function(edge /*, source, target*/) {\n      if (edge.data.resource === 'DestinationSecurityGroupId') {\n        // NOOP the direction is good\n      }\n      else if (edge.data.resource === 'GroupId') {\n        var newTarget = edge.data.source;\n        edge.data.source = edge.data.target;\n        edge.data.target = newTarget;\n      }\n      return true;\n    },\n    'default': function(edge, source, target) {\n      if (target && target.type === 'AWS::EC2::SecurityGroup' && source.type !== 'AWS::EC2::SecurityGroup'){\n        knownResources[edge.data.source].data.parent = edge.data.target;\n        return false;\n      }\n      return true;\n    },\n    'get': function(awsType) {\n      return this[awsType] || this['default'];\n    }\n  };\n  var data = { nodes:[], edges:[] };\n  var edgeIndex = 0;\n\n  var addEdge = function (toId, title, resource) {\n    possibleEdges.push({ data: { id: 'e'+ (edgeIndex++), source: resourceKey, target: toId, title: title, resource: resource }});\n  };\n\n  var knownResources = {};\n  var possibleEdges = [];\n\n  for (var resourceKey in json.Resources) {\n    var resource = json.Resources[resourceKey];\n    var r = {\n      data: {\n        id: resourceKey\n      },\n      classes: resource.Type.toLowerCase().replace(/::/g,'-'),\n      type: resource.Type\n    };\n    findEdges(resource.Properties, addEdge);\n    knownResources[resourceKey] = r;\n    data.nodes.push(r);\n  }\n\n  data.edges = possibleEdges.filter(function(edge) {\n    var source = knownResources[edge.data.source];\n    var target = knownResources[edge.data.target];\n    var filter = edgeFilters.get(source.type);\n    return edge && source && target && filter(edge, source, target);\n  });\n\n  return data;\n};\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/* jshint devel:true */\n/* global exports, require */\nvar findEdges = require('./findedges').findEdges;\nexports.graphOptions = {\n  'nodes': {\n    'brokenImage': 'images/unknown.png'\n  },\n  'edges': {\n    'style' : 'arrow',\n    'color.highlight': 'red'\n  },\n  'stabilize': true,\n  'zoomExtentOnStabilize': true\n};\nexports.collectData = function(json) {\n  'use strict';\n  var data = { nodes:[], edges:[] };\n  var knownResources = [];\n  var possibleEdges = [];\n  var addEdge = function (toId, title){\n    possibleEdges.push( {'from': resourceKey, 'to': toId, 'title': title } );\n  };\n  for (var resourceKey in json.Resources) {\n    var resource = json.Resources[resourceKey];\n    var props = resource.Properties;\n    var group = resource.Type.toLowerCase().replace(/::/g,'-');\n    knownResources.push(resourceKey);\n    data.nodes.push({\n      'id'   : resourceKey,\n      'label': resourceKey,\n      'group': group,\n      'shape': 'image',\n      'image': 'images/' + group + '.png'\n    });\n    findEdges(props, addEdge);\n  }\n  data.edges = possibleEdges.filter(function(edge) {\n    return edge && knownResources.indexOf(edge.to) >= 0;\n  });\n  return data;\n};\n\n\nexports.collectCyData = function(json) {\n  'use strict';\n  var edgeFilters = {\n    'AWS::EC2::SecurityGroupIngress': function(edge /*, source, target*/){\n      if (edge.data.resource === 'GroupId') {\n        // NOOP the direction is good\n      }\n      else if (edge.data.resource === 'SourceSecurityGroupId') {\n        var newTarget = edge.data.source;\n        edge.data.source = edge.data.target;\n        edge.data.target = newTarget;\n      }\n      return true;\n    },\n    'AWS::EC2::SecurityGroupEgress': function(edge /*, source, target*/) {\n      if (edge.data.resource === 'DestinationSecurityGroupId') {\n        // NOOP the direction is good\n      }\n      else if (edge.data.resource === 'GroupId') {\n        var newTarget = edge.data.source;\n        edge.data.source = edge.data.target;\n        edge.data.target = newTarget;\n      }\n      return true;\n    },\n    'default': function(edge, source, target) {\n      if (target && target.type === 'AWS::EC2::SecurityGroup' && source.type !== 'AWS::EC2::SecurityGroup'){\n        knownResources[edge.data.source].data.parent = edge.data.target;\n        return false;\n      }\n      return true;\n    },\n    'get': function(awsType) {\n      return this[awsType] || this['default'];\n    }\n  };\n  var data = { nodes:[], edges:[] };\n  var edgeIndex = 0;\n\n  var addEdge = function (toId, title, resource) {\n    possibleEdges.push({ data: { id: 'e'+ (edgeIndex++), source: resourceKey, target: toId, title: title, resource: resource }});\n  };\n\n  var knownResources = {};\n  var possibleEdges = [];\n\n  for (var resourceKey in json.Resources) {\n    var resource = json.Resources[resourceKey];\n    var r = {\n      data: {\n        id: resourceKey\n      },\n      classes: resource.Type.toLowerCase().replace(/::/g,'-'),\n      type: resource.Type\n    };\n    findEdges(resource.Properties, addEdge);\n    knownResources[resourceKey] = r;\n    data.nodes.push(r);\n  }\n\n  data.edges = possibleEdges.filter(function(edge) {\n    var source = knownResources[edge.data.source];\n    var target = knownResources[edge.data.target];\n    var filter = edgeFilters.get(source.type);\n    return edge && source && target && filter(edge, source, target);\n  });\n\n  return data;\n};\n\n},{\"./findedges\":3}],2:[function(require,module,exports){\n/* jshint devel:true */\n/* global cytoscape, saveAs, require, CodeMirror, alertify */\n\n(function(){'use strict';\n  var collector = require('./collectdata');\n  var myCodeMirror = new CodeMirror(document.getElementById('editor'), {\n    value: '{}',\n    lineNumbers: true,\n    mode: 'application/json',\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    lint: {\n      onUpdateLinting: function (annotations) {\n        if (template && (! annotations || annotations.length === 0)) {\n          template.show( collector.collectCyData(JSON.parse (myCodeMirror.getDoc().getValue() )));\n        }\n      }\n    }\n  });\n  myCodeMirror.setSize('100%','800px');\n  var graph;\n  var graphStyleP = $.ajax({ url: 'styles/main.cycss', type: 'GET', dataType: 'text' });\n  var isResizing = false,\n  lastDownX = 0;\n\n  var template = {\n\n    load: function(file){\n      var reader = new FileReader();\n      reader.onload = function () {\n        template.setData(reader.result);\n      };\n      reader.readAsText(file);\n    },\n    setData: function(data) {\n      if(data) {\n        try {\n          var dataString = typeof data === 'string' ? data : JSON.stringify(data, null, 2);\n          var dataObject = typeof data === 'object' ? data : JSON.parse(data);\n\n          myCodeMirror.getDoc().setValue(dataString);\n          template.show( collector.collectCyData( dataObject ) );\n          $('#graph_area').css('background-image','');\n        }\n        catch (e) {\n          console.log('ERROR processing data as JSON - ' + e );\n          alertify.error(e);\n        }\n      }\n    },\n    show: function(data) {\n      graph = cytoscape({\n        container: document.getElementById('graph_area'),\n        elements: data,\n        style: graphStyleP,\n        layout: {\n          name: 'cose',\n          padding: 5\n        }\n      });\n      graph.boxSelectionEnabled(true);\n    },\n    description: function() {\n      var description = 'template';\n      try {\n        description = JSON.parse(template.content()).Description;\n      } catch (e) {}\n      return description;\n    },\n    base64Image: function () {\n      graph.center(); graph.fit();\n      return graph.png({full: false});\n    },\n    content: function() { return myCodeMirror.getDoc().getValue(); },\n      setLayout: function(name) {graph.layout( { 'name': name });},\n    fromURL: function(url, success) {\n      if ( url ) {\n      $.jsonp({\n        url: url,\n        corsSupport: true,\n        success: function (data) {\n          template.setData(data);\n          if (success) {\n            success(data);\n          }\n        },\n        error: function(data, textStatus) {\n          console.log(textStatus );\n          console.log( data);\n          if (textStatus === 'parsererror') {\n            myCodeMirror.getDoc().setValue(data.responseText);\n            alertify.closeLogOnClick(true).error('Unable to parse result from ' + url + ' as valid JSON');\n          }\n          else {\n          var message = 'ERROR: ' + data.status + ' ' + data.statusText + ': ' + url;\n          alertify.closeLogOnClick(true).error(message);\n          }\n        }\n        // error, etc.\n      });\n      }\n    },\n    fromURLInput: function(input) {\n      var url = input.val();\n      if (input[0].checkValidity()) {\n        input.hide();\n        template.fromURL( url, function() {\n          alertify.success(url);\n        });\n      }\n      else {\n        return false;\n      }\n    }\n  };\n\n  var saveImage = function() {\n    var saveWindow = window.open('savegraph.html');\n    saveWindow.onload = function() {\n      saveWindow.document.getElementById('graphPNG').src = template.base64Image();\n    };\n  };\n  var saveTemplate = function() {\n    var prettyDoc = JSON.stringify(JSON.parse(template.content()), null, 2);\n    var blob = new Blob([prettyDoc], {type: 'text/plain;charset=utf-8'});\n    saveAs(blob, template.description() + '.json');\n  };\n  var mainRow = document.getElementById('graph_area');\n  mainRow.addEventListener('dragover', function(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    evt.dataTransfer.dropEffect = 'copy';\n  }, false);\n  mainRow.addEventListener('drop', function(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    template.load(evt.dataTransfer.files[0]);\n  }, false);\n  $('#graph_area').css('background-image','url(\"images/aws-cloudformation-template.svg\")');\n  $('#open_template').click(function(event){ event.preventDefault(); $('#template_input').click(); });\n  $('#open_url').click(function(event) {\n    event.preventDefault();\n    var remoteInput = $('#remote_input');\n\n    if (remoteInput.is(':visible')) {\n      template.fromURLInput(remoteInput);\n    }\n    else {\n      remoteInput.show();\n    }\n  });\n  $('#template_input').change(function(event){ template.load(event.target.files[0]); });\n  $('#save_template').click(function(event){ event.preventDefault(); saveTemplate(); return false;});\n  $('#save_graph').click(function(event){ event.preventDefault(); saveImage(); return false;});\n  $('#graph_layout').change(function() { template.setLayout( $('#graph_layout').val() ); });\n\n  $('#remote_input').keypress(function(e){\n    var remoteInput = $('#remote_input');\n    if (e.which === 13){\n      template.fromURLInput(remoteInput);\n      return false;\n    }\n  });\n  var container = $('#container'),\n  left = $('#graph_area'),\n    right = $('#editor_pane'),\n    handle = $('#border');\n\n  handle.on('mousedown', function (e) {\n    isResizing = true;\n    lastDownX = e.clientX;\n  });\n\n  $(document).on('mousemove', function (e) {\n    // we don't want to do anything if we aren't resizing.\n    if (!isResizing) {\n      return;\n    }\n\n    var offsetRight = container.width() - (e.clientX - container.offset().left);\n\n    left.css('right', offsetRight);\n    right.css('width', offsetRight);\n  }).on('mouseup', function () {\n    if (isResizing && graph) {\n      graph.fit();\n    }\n    // stop resizing\n    isResizing = false;\n  });\n})();\n\n},{\"./collectdata\":1}],3:[function(require,module,exports){\n/* jshint devel:true */\n/* global exports */\n\n// findEdges/findIn\n//  - startElement element to traverse through\n//  - makeEdge     call back which expects a reference resource name and\n//                   title of the resource reference\n//  - title        resource title to push to callback function\n//\nexports.findEdges = function findIn (start, makeEdge, title) {\n  'use strict';\n  // If start is an array then let's loop through all elements to find edges\n  //\n  if (start instanceof Array) {\n    start.forEach(function(elem){\n      findIn(elem, makeEdge, title || '');\n    });\n  }\n  // Else if we hit some object and we should delve into it\n  //\n  else if (typeof start === 'object') {\n    // When we only have one key then it's probably some CloudFormation function\n    // we can use to make an make edge with\n    //\n    if (Object.keys(start).length === 1) {\n      var fn = Object.keys(start)[0];\n      // If we hit a Ref, it's definitely a reference of some sorts\n      // usually we only hit this option deep and the title should be available\n      // otherwise give an empty title\n      //\n      if (fn === 'Ref' && typeof start[fn] === 'string') {\n        makeEdge(start[fn], title || '', title);\n      }\n      // An Fn::Join is trickier, we might find edges recursively\n      //\n      else if (fn === 'Fn::Join' && start[fn] instanceof Array) {\n        start[fn][1].forEach(function(elem) {\n          findIn(elem, makeEdge, start[fn][1].join(start[fn][0]));\n        });\n      }\n      // If we see an Fn::GetAtt then make an edge with the reference,\n      // not the attribute\n      //\n      else if (fn === 'Fn::GetAtt' && start[fn] instanceof Array) {\n        makeEdge(start[fn][0], start[fn][1], title);\n      }\n      // Ok, forgot why this path is necessary, I guess it's when we didn't find\n      //  something to easily pull references from and we probably need to keep\n      //  searching anyway\n      //\n      else {\n        for (var key in start) {\n          findIn(start[key], makeEdge, key);\n        }\n      }\n    }\n    // if we have more than one key we have to delve deeper to find edges\n    //\n    else {\n      for (var k in start) {\n        findIn(start[k], makeEdge, k);\n      }\n    }\n  }\n};\n\n},{}]},{},[2])\n\n","/* jshint devel:true */\n/* global cytoscape, saveAs, require, CodeMirror, alertify */\n\n(function(){'use strict';\n  var collector = require('./collectdata');\n  var myCodeMirror = new CodeMirror(document.getElementById('editor'), {\n    value: '{}',\n    lineNumbers: true,\n    mode: 'application/json',\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    lint: {\n      onUpdateLinting: function (annotations) {\n        if (template && (! annotations || annotations.length === 0)) {\n          template.show( collector.collectCyData(JSON.parse (myCodeMirror.getDoc().getValue() )));\n        }\n      }\n    }\n  });\n  myCodeMirror.setSize('100%','800px');\n  var graph;\n  var graphStyleP = $.ajax({ url: 'styles/main.cycss', type: 'GET', dataType: 'text' });\n  var isResizing = false,\n  lastDownX = 0;\n\n  var template = {\n\n    load: function(file){\n      var reader = new FileReader();\n      reader.onload = function () {\n        template.setData(reader.result);\n      };\n      reader.readAsText(file);\n    },\n    setData: function(data) {\n      if(data) {\n        try {\n          var dataString = typeof data === 'string' ? data : JSON.stringify(data, null, 2);\n          var dataObject = typeof data === 'object' ? data : JSON.parse(data);\n\n          myCodeMirror.getDoc().setValue(dataString);\n          template.show( collector.collectCyData( dataObject ) );\n          $('#graph_area').css('background-image','');\n        }\n        catch (e) {\n          console.log('ERROR processing data as JSON - ' + e );\n          alertify.error(e);\n        }\n      }\n    },\n    show: function(data) {\n      graph = cytoscape({\n        container: document.getElementById('graph_area'),\n        elements: data,\n        style: graphStyleP,\n        layout: {\n          name: 'cose',\n          padding: 5\n        }\n      });\n      graph.boxSelectionEnabled(true);\n    },\n    description: function() {\n      var description = 'template';\n      try {\n        description = JSON.parse(template.content()).Description;\n      } catch (e) {}\n      return description;\n    },\n    base64Image: function () {\n      graph.center(); graph.fit();\n      return graph.png({full: false});\n    },\n    content: function() { return myCodeMirror.getDoc().getValue(); },\n      setLayout: function(name) {graph.layout( { 'name': name });},\n    fromURL: function(url, success) {\n      if ( url ) {\n      $.jsonp({\n        url: url,\n        corsSupport: true,\n        success: function (data) {\n          template.setData(data);\n          if (success) {\n            success(data);\n          }\n        },\n        error: function(data, textStatus) {\n          console.log(textStatus );\n          console.log( data);\n          if (textStatus === 'parsererror') {\n            myCodeMirror.getDoc().setValue(data.responseText);\n            alertify.closeLogOnClick(true).error('Unable to parse result from ' + url + ' as valid JSON');\n          }\n          else {\n          var message = 'ERROR: ' + data.status + ' ' + data.statusText + ': ' + url;\n          alertify.closeLogOnClick(true).error(message);\n          }\n        }\n        // error, etc.\n      });\n      }\n    },\n    fromURLInput: function(input) {\n      var url = input.val();\n      if (input[0].checkValidity()) {\n        input.hide();\n        template.fromURL( url, function() {\n          alertify.success(url);\n        });\n      }\n      else {\n        return false;\n      }\n    }\n  };\n\n  var saveImage = function() {\n    var saveWindow = window.open('savegraph.html');\n    saveWindow.onload = function() {\n      saveWindow.document.getElementById('graphPNG').src = template.base64Image();\n    };\n  };\n  var saveTemplate = function() {\n    var prettyDoc = JSON.stringify(JSON.parse(template.content()), null, 2);\n    var blob = new Blob([prettyDoc], {type: 'text/plain;charset=utf-8'});\n    saveAs(blob, template.description() + '.json');\n  };\n  var mainRow = document.getElementById('graph_area');\n  mainRow.addEventListener('dragover', function(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    evt.dataTransfer.dropEffect = 'copy';\n  }, false);\n  mainRow.addEventListener('drop', function(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    template.load(evt.dataTransfer.files[0]);\n  }, false);\n  $('#graph_area').css('background-image','url(\"images/aws-cloudformation-template.svg\")');\n  $('#open_template').click(function(event){ event.preventDefault(); $('#template_input').click(); });\n  $('#open_url').click(function(event) {\n    event.preventDefault();\n    var remoteInput = $('#remote_input');\n\n    if (remoteInput.is(':visible')) {\n      template.fromURLInput(remoteInput);\n    }\n    else {\n      remoteInput.show();\n    }\n  });\n  $('#template_input').change(function(event){ template.load(event.target.files[0]); });\n  $('#save_template').click(function(event){ event.preventDefault(); saveTemplate(); return false;});\n  $('#save_graph').click(function(event){ event.preventDefault(); saveImage(); return false;});\n  $('#graph_layout').change(function() { template.setLayout( $('#graph_layout').val() ); });\n\n  $('#remote_input').keypress(function(e){\n    var remoteInput = $('#remote_input');\n    if (e.which === 13){\n      template.fromURLInput(remoteInput);\n      return false;\n    }\n  });\n  var container = $('#container'),\n  left = $('#graph_area'),\n    right = $('#editor_pane'),\n    handle = $('#border');\n\n  handle.on('mousedown', function (e) {\n    isResizing = true;\n    lastDownX = e.clientX;\n  });\n\n  $(document).on('mousemove', function (e) {\n    // we don't want to do anything if we aren't resizing.\n    if (!isResizing) {\n      return;\n    }\n\n    var offsetRight = container.width() - (e.clientX - container.offset().left);\n\n    left.css('right', offsetRight);\n    right.css('width', offsetRight);\n  }).on('mouseup', function () {\n    if (isResizing && graph) {\n      graph.fit();\n    }\n    // stop resizing\n    isResizing = false;\n  });\n})();\n","/* jshint devel:true */\n/* global exports */\n\n// findEdges/findIn\n//  - startElement element to traverse through\n//  - makeEdge     call back which expects a reference resource name and\n//                   title of the resource reference\n//  - title        resource title to push to callback function\n//\nexports.findEdges = function findIn (start, makeEdge, title) {\n  'use strict';\n  // If start is an array then let's loop through all elements to find edges\n  //\n  if (start instanceof Array) {\n    start.forEach(function(elem){\n      findIn(elem, makeEdge, title || '');\n    });\n  }\n  // Else if we hit some object and we should delve into it\n  //\n  else if (typeof start === 'object') {\n    // When we only have one key then it's probably some CloudFormation function\n    // we can use to make an make edge with\n    //\n    if (Object.keys(start).length === 1) {\n      var fn = Object.keys(start)[0];\n      // If we hit a Ref, it's definitely a reference of some sorts\n      // usually we only hit this option deep and the title should be available\n      // otherwise give an empty title\n      //\n      if (fn === 'Ref' && typeof start[fn] === 'string') {\n        makeEdge(start[fn], title || '', title);\n      }\n      // An Fn::Join is trickier, we might find edges recursively\n      //\n      else if (fn === 'Fn::Join' && start[fn] instanceof Array) {\n        start[fn][1].forEach(function(elem) {\n          findIn(elem, makeEdge, start[fn][1].join(start[fn][0]));\n        });\n      }\n      // If we see an Fn::GetAtt then make an edge with the reference,\n      // not the attribute\n      //\n      else if (fn === 'Fn::GetAtt' && start[fn] instanceof Array) {\n        makeEdge(start[fn][0], start[fn][1], title);\n      }\n      // Ok, forgot why this path is necessary, I guess it's when we didn't find\n      //  something to easily pull references from and we probably need to keep\n      //  searching anyway\n      //\n      else {\n        for (var key in start) {\n          findIn(start[key], makeEdge, key);\n        }\n      }\n    }\n    // if we have more than one key we have to delve deeper to find edges\n    //\n    else {\n      for (var k in start) {\n        findIn(start[k], makeEdge, k);\n      }\n    }\n  }\n};\n"],"sourceRoot":"/source/"}